{"ast":null,"code":"var _jsxFileName = \"/home/steve/Documents/test/circlo/iklim/src/components/TableTemperature.js\";\nimport React from 'react';\nimport * as cityCode from '../utils/countryCode';\nimport { loadWeather } from './action';\nimport { connect } from 'react-redux';\n\nclass TableTemperature extends React.Component {\n  componentDidMount() {\n    if (this.props.city == 'jkt') {\n      this.props.loadWeather(cityCodeJakarta);\n    } else if (this.props.city == 'bk') {\n      this.props.loadWeather(cityCodeBangkok);\n    } else if (this.props.city == 'sg') {\n      this.props.loadWeather(cityCodeSingapore);\n    } else if (this.props.city == 'mn') {\n      this.props.loadWeather(cityCodeManila);\n    }\n  }\n\n  calculateAverage(arrayNumber) {\n    let sum = 0;\n\n    for (let i = 0; i < arrayNumber.length; i++) {\n      sum += arrayNumber[i];\n    }\n\n    return sum / arrayNumber.length;\n  }\n\n  render() {\n    let city;\n\n    switch (this.props.city) {\n      case 'jkt':\n        city = 'Jakarta';\n        break;\n\n      case 'bk':\n        city = 'Bangkok';\n        break;\n\n      case 'sg':\n        city = 'Singapore';\n        break;\n\n      case 'mn':\n        city = 'Manila';\n        break;\n\n      default:\n        city = 'No city selected';\n        break;\n    }\n\n    let arrayTemp = [];\n    let arrayTempDiff = [];\n    let weathers = this.props.weather.map(item => {\n      let date = new Date(item.dt);\n      let temperature = item.main.temp;\n      arrayTemp.push(temperature);\n      let temperatureDiff = item.main.temp_max - item.main.temp_min;\n      arrayTempDiff.push(temperatureDiff);\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, date), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, temperature + 'C'), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, temperatureDiff + 'C'));\n    });\n    return React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, city), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Suhu\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Perbedaan\")), weathers, \";\", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Rata-Rata\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.calculateAverage(arrayTemp) + 'C')), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.calculateAverage(arrayTempDiff) + 'C'))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  weather: state.weather\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadWeather: cityID => dispatch(loadWeather(cityID))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableTemperature);","map":{"version":3,"sources":["/home/steve/Documents/test/circlo/iklim/src/components/TableTemperature.js"],"names":["React","cityCode","loadWeather","connect","TableTemperature","Component","componentDidMount","props","city","cityCodeJakarta","cityCodeBangkok","cityCodeSingapore","cityCodeManila","calculateAverage","arrayNumber","sum","i","length","render","arrayTemp","arrayTempDiff","weathers","weather","map","item","date","Date","dt","temperature","main","temp","push","temperatureDiff","temp_max","temp_min","mapStateToProps","state","mapDispatchToProps","dispatch","cityID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as cityCode from '../utils/countryCode';\nimport {loadWeather} from './action';\nimport {connect} from 'react-redux'\n\nclass TableTemperature extends React.Component {\n\n    componentDidMount() {\n        if (this.props.city == 'jkt') {\n            this.props.loadWeather(cityCodeJakarta);\n        } else if (this.props.city == 'bk') {\n            this.props.loadWeather(cityCodeBangkok);\n        } else if (this.props.city == 'sg') {\n            this.props.loadWeather(cityCodeSingapore);\n        } else if (this.props.city == 'mn') {\n            this.props.loadWeather(cityCodeManila);\n        }\n    }\n\n    calculateAverage(arrayNumber) {\n        let sum = 0;\n        for (let i=0;i<arrayNumber.length;i++) {\n            sum += arrayNumber[i];\n        }\n        return sum / arrayNumber.length;\n    }\n\n    render() {\n        let city;\n        switch (this.props.city) {\n            case 'jkt': city = 'Jakarta'; break;\n            case 'bk': city = 'Bangkok'; break;\n            case 'sg': city = 'Singapore'; break;\n            case 'mn': city = 'Manila'; break;\n            default : city = 'No city selected'; break;\n        }\n        let arrayTemp = [];\n        let arrayTempDiff = [];\n        let weathers = this.props.weather.map((item) => {\n            let date = new Date(item.dt);\n            let temperature = item.main.temp;\n            arrayTemp.push(temperature);\n            let temperatureDiff = item.main.temp_max - item.main.temp_min;\n            arrayTempDiff.push(temperatureDiff);\n            return (\n                <tr>\n                    <td>{date}</td>\n                    <td>{temperature+'C'}</td>\n                    <td>{temperatureDiff+'C'}</td>\n                </tr>\n            )\n        })\n        return (\n            <table>\n                <tr>\n                    <th>{city}</th>\n                    <th>Suhu</th>\n                    <th>Perbedaan</th>\n                </tr>\n                {weathers};\n                <tr>\n                    <td><strong>Rata-Rata</strong></td>\n                    <td><strong>{this.calculateAverage(arrayTemp)+'C'}</strong></td>\n                    <td><strong>{this.calculateAverage(arrayTempDiff)+'C'}</strong></td>\n                </tr>\n            </table>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    weather : state.weather\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    loadWeather : (cityID) => (dispatch(loadWeather(cityID)))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n) (TableTemperature);\n"]},"metadata":{},"sourceType":"module"}